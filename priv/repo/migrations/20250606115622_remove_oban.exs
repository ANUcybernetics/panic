defmodule Panic.Repo.Migrations.RemoveOban do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_sqlite.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # SQLite doesn't support ALTER COLUMN, so we need to recreate the table
    create table(:invocations_new, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :input, :text, null: false
      add :state, :text, null: false
      add :model, {:array, :text}, null: false
      add :metadata, :map, null: false, default: %{}
      add :output, :text
      add :sequence_number, :bigint, null: false
      add :run_number, :bigint
      add :inserted_at, :utc_datetime_usec, null: false
      add :updated_at, :utc_datetime_usec, null: false

      add :network_id,
          references(:networks, column: :id, name: "invocations_network_id_fkey", type: :bigint),
          null: false
    end

    # Copy data from old table to new table, converting model to array
    execute """
    INSERT INTO invocations_new (
      id, input, state, model, metadata, output, sequence_number,
      run_number, inserted_at, updated_at, network_id
    )
    SELECT
      id, input, state,
      CASE
        WHEN model IS NULL THEN json_array()
        ELSE json_array(model)
      END as model,
      metadata, output, sequence_number,
      run_number, inserted_at, updated_at, network_id
    FROM invocations
    """

    # Drop old table
    drop table(:invocations)

    # Rename new table
    rename table(:invocations_new), to: table(:invocations)

    # Create indexes
    create unique_index(:invocations, [:network_id, :run_number, :sequence_number],
             name: "invocations_unique_in_run_index"
           )
  end

  def down do
    # Drop the unique index
    drop_if_exists unique_index(:invocations, [:network_id, :run_number, :sequence_number],
                     name: "invocations_unique_in_run_index"
                   )

    # Recreate table with original schema
    create table(:invocations_new, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :input, :text, null: false
      add :state, :text, null: false
      add :model, :text, null: false
      add :metadata, :map, null: false, default: %{}
      add :output, :text
      add :sequence_number, :bigint, null: false
      add :run_number, :bigint
      add :inserted_at, :utc_datetime_usec, null: false
      add :updated_at, :utc_datetime_usec, null: false

      add :network_id,
          references(:networks, column: :id, name: "invocations_network_id_fkey", type: :bigint),
          null: false
    end

    # Copy data back, converting array to single value (take first element)
    execute """
    INSERT INTO invocations_new (
      id, input, state, model, metadata, output, sequence_number,
      run_number, inserted_at, updated_at, network_id
    )
    SELECT
      id, input, state,
      CASE
        WHEN model IS NULL THEN ''
        WHEN json_type(model) = 'array' AND json_array_length(model) > 0 THEN json_extract(model, '$[0]')
        ELSE model
      END as model,
      metadata, output, sequence_number,
      run_number, inserted_at, updated_at, network_id
    FROM invocations
    """

    # Drop old table
    drop table(:invocations)

    # Rename new table
    rename table(:invocations_new), to: table(:invocations)
  end
end
