defmodule Panic.Repo.Migrations.FlattenModelsArray do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_sqlite.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # First, create a temporary column to store the flattened models
    alter table(:networks) do
      add :models_flat, {:array, :text}, default: []
    end

    # Migrate the data from nested array to flat array
    # The nested structure was: [["model1", "vestaboard1"], ["model2", "vestaboard2"], ...]
    # We want to extract just: ["model1", "model2", ...]
    # In SQLite, arrays are stored as JSON strings
    execute """
    UPDATE networks
    SET models_flat = (
      CASE
        WHEN models IS NOT NULL AND models != '[]' THEN
          (
            SELECT json_group_array(json_extract(value, '$[0]'))
            FROM json_each(models)
            WHERE json_extract(value, '$[0]') IS NOT NULL
          )
        ELSE '[]'
      END
    )
    """

    # Drop the old column
    alter table(:networks) do
      remove :models
    end

    # Rename the new column
    rename table(:networks), :models_flat, to: :models
  end

  def down do
    # Create temporary column for nested array
    alter table(:networks) do
      add :models_nested, {:array, {:array, :text}}, default: []
    end

    # Convert flat array back to nested array (without vestaboard data)
    execute """
    UPDATE networks
    SET models_nested = (
      CASE
        WHEN models IS NOT NULL AND models != '[]' THEN
          (
            SELECT json_group_array(json_array(value))
            FROM json_each(models)
            WHERE value IS NOT NULL
          )
        ELSE '[]'
      END
    )
    """

    # Drop the flat column
    alter table(:networks) do
      remove :models
    end

    # Rename the nested column back
    rename table(:networks), :models_nested, to: :models
  end
end
